name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  #================================================= Validation jobs =================================================#

  validate-pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install conventional commit checker
        run: npm install -g @commitlint/cli @commitlint/config-conventional
      - name: Validate PR title
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: echo "$PR_TITLE" | npx commitlint --config ./commitlint.config.js

  validate-conventional-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Install conventional commit checker
        run: npm install -g @commitlint/cli @commitlint/config-conventional
      - name: Validate commit messages in push
        run: |
          npx commitlint --from ${{ github.event.before }} --to ${{ github.event.after }} --verbose --config ./commitlint.config.js || npx commitlint --last --verbose --config ./commitlint.config.js

  check-version-bump:
    name: Check VERSION bump on PR to main
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.base_ref == 'main') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if VERSION file changed
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.base_ref }}
            RANGE="origin/${{ github.base_ref }}...HEAD"
          else
            RANGE="${{ github.event.before }}...${{ github.event.after }}"
          fi
          if git diff --name-only $RANGE | grep -q '^VERSION$'; then
            echo "VERSION file was changed."
          else
            echo "ERROR: VERSION file must be bumped for changes to main."
            exit 1
          fi

  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Lint
        run: make lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: brewsource_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/brewsource_test?sslmode=disable
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run tests
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/brewsource_test?sslmode=disable
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Check coverage threshold
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: ${coverage}%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Coverage is below 80% threshold"
            exit 1
          fi

  security-scan:
    name: Security Scan & Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Security Scan
        run: make security

  #=============================================== Build & Release jobs ===============================================#

  create-pr-rfv-release:
    name: Create PR RFV Release
    runs-on: ubuntu-latest
    needs: [validate-pr-title, check-version-bump, lint, test, security-scan, validate-conventional-commits]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set lowercase repository name
        id: repo_lower
        run: echo "repo_lowercase=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT



      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (rfv)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.repo_lower.outputs.repo_lowercase }}:v${{ steps.get_version.outputs.version }}-rfv-${{ github.run_number }}
            ghcr.io/${{ steps.repo_lower.outputs.repo_lowercase }}:rfv-latest

      - name: Create tag for PR (rfv)
        run: |
          TAG="v${{ steps.get_version.outputs.version }}-rfv-${{ github.run_number }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $TAG
          git push origin $TAG

  create-main-release:
    name: Create Main Release
    runs-on: ubuntu-latest
    needs: [check-version-bump, lint, test, security-scan, validate-conventional-commits]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set lowercase repository name
        id: repo_lower
        run: echo "repo_lowercase=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: brewsource-mcp-binary
          path: ./release-artifacts/

      - name: Move binary to app/bin
        run: |
          mkdir -p app/bin
          cp ./release-artifacts/brewsource-mcp app/bin/brewsource-mcp

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (main)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.repo_lower.outputs.repo_lowercase }}:v${{ steps.get_version.outputs.version }}
            ghcr.io/${{ steps.repo_lower.outputs.repo_lowercase }}:latest

      - name: Create tag for main
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $TAG
          git push origin $TAG

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: 'Release v${{ steps.get_version.outputs.version }}'
          generate_release_notes: true
          files: ./release-artifacts/brewsource-mcp
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
