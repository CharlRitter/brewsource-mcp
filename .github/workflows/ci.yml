name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Lint
        run: make lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: brewsource_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/brewsource_test?sslmode=disable
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run tests
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/brewsource_test?sslmode=disable
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Check coverage threshold
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: ${coverage}%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Coverage is below 80% threshold"
            exit 1
          fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build application
        run: |
          mkdir -p app/bin
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o app/bin/brewsource-mcp ./app/cmd/server

      - name: Test binary execution
        run: |
          chmod +x app/bin/brewsource-mcp
          timeout 5s ./app/bin/brewsource-mcp -help || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: brewsource-mcp-binary
          path: app/bin/brewsource-mcp

  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: brewsource_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: brewsource-mcp-binary
          path: app/bin/

      - name: Make binary executable
        run: chmod +x app/bin/brewsource-mcp

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: brewsource-mcp:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

          # Start container in background
          docker run -d --name brewsource-test \
            -p 8080:8080 \
            --network host \
            -e DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/brewsource_test?sslmode=disable \
            -e LOG_LEVEL=info \
            brewsource-mcp:test

          # Wait for container to start
          sleep 10

          # Test health endpoint
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8080/health; then
              echo "Health check passed!"
              break
            fi
            echo "Health check failed, attempt $((attempt + 1))/$max_attempts"
            sleep 2
            attempt=$((attempt + 1))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            docker logs brewsource-test
            exit 1
          fi

          # Test server info endpoint
          curl -f http://localhost:8080/

          # Stop container
          docker stop brewsource-test
          docker rm brewsource-test

  conventional-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install conventional commit checker
        run: npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Create commitlint config
        run: |
          cat > commitlint.config.js << 'EOF'
          module.exports = {
            extends: ['@commitlint/config-conventional'],
            rules: {
              'type-enum': [2, 'always', [
                'feat',     // New feature
                'fix',      // Bug fix
                'docs',     // Documentation changes
                'style',    // Code style changes (formatting, etc.)
                'refactor', // Code refactoring
                'test',     // Adding or updating tests
                'chore',    // Maintenance tasks
                'perf',     // Performance improvements
                'ci',       // CI/CD changes
                'build',    // Build system changes
                'revert'    // Revert previous commit
              ]],
              'subject-case': [2, 'always', 'sentence-case'],
              'subject-max-length': [2, 'always', 72],
              'body-max-line-length': [2, 'always', 100]
            }
          };
          EOF

      - name: Validate PR title
        run: |
          echo "${{ github.event.pull_request.title }}" | npx commitlint

      - name: Validate commit messages
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  security-scan:
    name: Security Scan & Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.23'

      - name: Security Scan
        run: make security

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, test, build, docker, conventional-commits, security-scan]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Linting failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build failed"
            exit 1
          fi
          if [[ "${{ needs.docker.result }}" != "success" ]]; then
            echo "Docker build/test failed"
            exit 1
          fi
          # Only check conventional-commits if it ran (on PRs)
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ needs.conventional-commits.result }}" != "success" ]]; then
            echo "Conventional commits check failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          echo "All checks passed! âœ…"
